/* eslint-disable */

/**
 * Generated by Verge3D Puzzles v.4.3.1
 * Wed, 07 Jun 2023 23:50:17 GMT
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */
function createPL(v3d = window.v3d) {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.openedFileMeta = {};
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};
_pGlob.customEvents = new v3d.EventDispatcher();
_pGlob.eventListeners = [];

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster(); // always check visibility

var PL = {};
// backward compatibility
if (v3d[Symbol.toStringTag] !== 'Module') {
    v3d.PL = v3d.puzzles = PL;
}

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    // utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}

// addHTMLElement puzzle
function addHTMLElement(elemType, id, mode, targetId, isParent) {

    var win = isParent ? window.parent : window;

    var elem = win.document.createElement(elemType);
    if (id !== '')
        elem.id = id;

    var targetElem = getElement(targetId, isParent);
    if (targetElem instanceof win.Element) {
        switch (mode) {
            case 'TO':
                targetElem.appendChild(elem);
                break;
            case 'BEFORE':
                targetElem.insertAdjacentElement('beforebegin', elem);
                break;
            case 'AFTER':
                targetElem.insertAdjacentElement('afterend', elem);
                break;
        }
    }
}



// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = false;
_initGlob.output.initOptions.useBkgTransp = false;
_initGlob.output.initOptions.preserveDrawBuf = false;
_initGlob.output.initOptions.useCompAssets = false;
_initGlob.output.initOptions.useFullscreen = true;

addHTMLElement('h1', 'hello', 'TO', ['WINDOW'], false);

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}



/**
 * Get a scene that contains the root of the given action.
 */
function getSceneByAction(action) {
    var root = action.getRoot();
    var scene = root.type == "Scene" ? root : null;
    root.traverseAncestors(function(ancObj) {
        if (ancObj.type == "Scene") {
            scene = ancObj;
        }
    });
    return scene;
}

/**
 * Get the current scene's framerate.
 */
function getSceneAnimFrameRate(scene) {
    if (scene && 'animFrameRate' in scene.userData) {
        return scene.userData.animFrameRate;
    }
    return 24;
}

function _checkListenersSame(target0, type0, listener0, optionsOrUseCapture0,
        target1, type1, listener1, optionsOrUseCapture1) {
    const capture0 = Boolean(optionsOrUseCapture0 instanceof Object
            ? optionsOrUseCapture0.capture : optionsOrUseCapture0);
    const capture1 = Boolean(optionsOrUseCapture1 instanceof Object
            ? optionsOrUseCapture1.capture : optionsOrUseCapture1);
    return target0 === target1 && type0 === type1 && listener0 === listener1
            && capture0 === capture1;
}

/**
 * Add the specified event listener to the specified target. This function also
 * stores listener data for easier disposing.
 */
function bindListener(target, type, listener, optionsOrUseCapture) {
    const alreadyExists = _pGlob.eventListeners.some(elem => {
        return _checkListenersSame(elem.target, elem.type, elem.listener,
                elem.optionsOrUseCapture, target, type, listener,
                optionsOrUseCapture);
    });

    if (!alreadyExists) {
        target.addEventListener(type, listener, optionsOrUseCapture);
        _pGlob.eventListeners.push({ target, type, listener, optionsOrUseCapture });
    }
}

_pGlob.animMixerCallbacks = [];

var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished)) {
            bindListener(appInstance.mixer, 'finished', onMixerFinished);
        }
    };

}();

// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = getSceneByAction(action);
                var frameRate = getSceneAnimFrameRate(scene);

                action.repetitions = Infinity;

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = getSceneByAction(action);
            var frameRate = getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        case 'SET_SPEED':
            var timeScale = parseFloat(speed);
            action.timeScale = rev ? -timeScale : timeScale;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}

// autoRotateCamera puzzle
function autoRotateCamera(enabled, speed) {

    if (appInstance.controls && appInstance.controls instanceof v3d.OrbitControls) {
        appInstance.controls.autoRotate = enabled;
        appInstance.controls.autoRotateSpeed = speed;
    } else {
        console.error('autorotate camera: Wrong controls type');
    }
}

// setTimer puzzle
function registerSetTimer(id, timeout, callback, repeat) {

    if (id in _pGlob.intervalTimers) {
        window.clearInterval(_pGlob.intervalTimers[id]);
    }

    _pGlob.intervalTimers[id] = window.setInterval(function() {
        if (repeat-- > 0) {
            callback(_pGlob.intervalTimers[id]);
        }
    }, 1000 * timeout);
}

// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return obj.type !== 'AmbientLight' &&
           obj.name !== '' &&
           !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
           !obj.isAuxClippingMesh;
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    if (appInstance.scene) {
        appInstance.scene.traverse(function(obj) {
            if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
                objFound = obj;
                if (runTime) {
                    _pGlob.objCache[objName] = objFound;
                }
            }
        });
    }
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc.filter(function(name) {
        return name;
    });
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}

// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart, mouseButtons) {

    var elem = appInstance.renderer.domElement;
    bindListener(elem, eventType, pickListener);

    if (eventType == 'mousedown') {

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        bindListener(elem, touchEventName, pickListener);

    } else if (eventType == 'dblclick') {

        var prevTapTime = 0;

        function doubleTapCallback(event) {

            var now = new Date().getTime();
            var timesince = now - prevTapTime;

            if (timesince < 600 && timesince > 0) {

                pickListener(event);
                prevTapTime = 0;
                return;

            }

            prevTapTime = new Date().getTime();
        }

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        bindListener(elem, touchEventName, doubleTapCallback);
    }

    var raycaster = new v3d.Raycaster();

    function pickListener(event) {

        // to handle unload in loadScene puzzle
        if (!appInstance.getCamera())
            return;

        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            if (mouseButtons && mouseButtons.indexOf(event.button) == -1)
                return;
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.getCamera(true));
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList, false);
        callback(intersects, event);
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered, whenDraggedOver, and raycast puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}

// whenClicked puzzle
function registerOnClick(objSelector, xRay, doubleClick, mouseButtons, cbDo, cbIfMissedDo) {

    // for AR/VR
    _pGlob.objClickInfo = _pGlob.objClickInfo || [];

    _pGlob.objClickInfo.push({
        objSelector: objSelector,
        callbacks: [cbDo, cbIfMissedDo]
    });

    initObjectPicking(function(intersects, event) {

        var isPicked = false;

        var maxIntersects = xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);
            var objNames = retrieveObjectNames(objSelector);

            if (objectsIncludeObj(objNames, objName)) {
                // save the object for the pickedObject block
                _pGlob.pickedObject = objName;
                isPicked = true;
                cbDo(event);
            }
        }

        if (!isPicked) {
            _pGlob.pickedObject = '';
            cbIfMissedDo(event);
        }

    }, doubleClick ? 'dblclick' : 'mousedown', false, mouseButtons);
}

// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}

// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}

function findUniqueObjectName(name) {
    function objNameUsed(name) {
        return Boolean(getObjectByName(name));
    }
    while (objNameUsed(name)) {
        var r = name.match(/^(.*?)(\d+)$/);
        if (!r) {
            name += "2";
        } else {
            name = r[1] + (parseInt(r[2], 10) + 1);
        }
    }
    return name;
}

// addAnnotation and removeAnnotation puzzles
function handleAnnot(add, annot, objSelector, contents, id, name) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        // check if it already has an annotation and remove it
        for (var j = 0; j < obj.children.length; j++) {
            var child = obj.children[j];
            if (child.type == "Annotation") {
                // delete all childs of annotation
                child.traverse(function(child2) {
                    if (child2.isAnnotation)
                        child2.dispose();
                    });
                obj.remove(child);
            }
        }
        if (add) {
            var aObj = new v3d.Annotation(appInstance.container, annot, contents);
            aObj.name = findUniqueObjectName(name ? name : annot);
            aObj.fadeObscured = _pGlob.fadeAnnotations;
            if (id) {
                aObj.annotation.id = id;
                aObj.annotationDialog.id = id+'_dialog';
            }
            obj.add(aObj);
        }
    }
}



operateAnimation('PAUSE', 'Battery', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'Battery bridle', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'Battery holder', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'Bridle screw', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'Bridle screw.001', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'Bridle screw.002', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'Bridle screw.003', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'Cannon pinion assembly', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'Center bridge assembly', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'Center second stop lever', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'Clutch assembly', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'Clutch screw', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'Coil assembly', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'Coil guard', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'CSSL screw', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'ECB assembly', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'EM screw', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'EM screw001', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'CameraAim', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'Hour wheel', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'Int. wheel assembly', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'Metal block assy.', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'Minute wheel assembly', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'Rotor assembly', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'Second wheel assembly', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'Stator', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'Stem', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'Sliding pinion', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'Stem locking lever', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'Stem locking pegs', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'Third wheel assembly', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'Train Wheel Bridge Assembly', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'TWB banking', null, null, 'AUTO', 1,
        function() {}, false);

    autoRotateCamera(true, -1);
registerOnClick(['ALL_OBJECTS'], false, false, [0,1,2], function() {
  autoRotateCamera(false, 0);
  registerSetTimer('autoRotate', 30, function() {
    autoRotateCamera(true, -1);
  }, Infinity);
}, function() {});
registerOnClick(['GROUP', 'Collection'], false, false, [0,1,2], function() {

  operateAnimation('PAUSE', 'Battery', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'Battery bridle', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'Battery holder', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'Bridle screw', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'Bridle screw.001', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'Bridle screw.002', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'Bridle screw.003', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'Cannon pinion assembly', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'Center bridge assembly', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'Center second stop lever', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'Clutch assembly', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'Clutch screw', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'Coil assembly', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'Coil guard', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'CSSL screw', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'ECB assembly', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'EM screw', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'EM screw001', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'CameraAim', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'Hour wheel', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'Int. wheel assembly', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'Metal block assy.', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'Minute wheel assembly', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'Rotor assembly', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'Second wheel assembly', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'Stator', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'Stem', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'Sliding pinion', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'Stem locking lever', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'Stem locking pegs', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'Third wheel assembly', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'Train Wheel Bridge Assembly', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'TWB banking', null, null, 'AUTO', 1,
          function() {}, false);

      }, function() {

  operateAnimation('RESUME', 'Battery', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'Battery bridle', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'Battery holder', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'Bridle screw', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'Bridle screw.001', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'Bridle screw.002', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'Bridle screw.003', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'Cannon pinion assembly', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'Center bridge assembly', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'Center second stop lever', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'Clutch assembly', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'Clutch screw', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'Coil assembly', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'Coil guard', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'CSSL screw', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'ECB assembly', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'EM screw', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'EM screw001', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'CameraAim', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'Hour wheel', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'Int. wheel assembly', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'Metal block assy.', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'Minute wheel assembly', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'Rotor assembly', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'Second wheel assembly', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'Stator', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'Stem', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'Sliding pinion', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'Stem locking lever', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'Stem locking pegs', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'Third wheel assembly', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'Train Wheel Bridge Assembly', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'TWB banking', null, null, 'AUTO', 1,
          function() {}, false);

      setHTMLElemStyle('display', 'none', ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '13.1', '13.2', '13.3', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', 'hw', 'sp', 'crn', 'stem'], false);
});

handleAnnot(true, 'Main Plate Assembly', '1mainPlateAnnotation', 'A metal block that houses all the movement components.', '1', undefined);
handleAnnot(true, 'Minute Wheel Assembly', '2minuteWheelAnnotation', 'Fifth element of the gear train, either driven by the smaller wheel of the cannon pinion, or by the sliding pinion in setting mode.', '2', undefined);
handleAnnot(true, 'Cannon Pinion Assembly', '3cannonPinionAnnotation', 'Fourth element of the gear train, consisting of a tube holding the minute hand and two wheels stacked against one another. The larger wheel is driven by the third wheel, while the smaller wheel drives the minute wheel. The smaller wheel is alternatively driven by the minute wheel in setting mode.', '3', undefined);
handleAnnot(true, 'Center Bridge Assembly', '4centerBridgeAnnotation', 'Attaches to the clutch and holds the cannon pinion and stem in place.', '4', undefined);
handleAnnot(true, 'Stator', '5statorAnnotation', 'Holds up the coil assembly and houses the rotor.', '5', undefined);
handleAnnot(true, 'Clutch Assembly', '6clutchAnnotation', 'Holds the wheel train in place and houses the stem mechanism.', '6', undefined);
handleAnnot(true, 'Rotor Assembly', '7rotorAnnotation', 'Magnetic device with polarized sides, which rotates as the coil pulses each second, driving the wheels starting with the intermediate wheel.', '7', undefined);
handleAnnot(true, 'Third Wheel Assembly', '8thirdWheelAnnotation', 'Third element of the wheel train, driven by the second wheel.', '8', undefined);
handleAnnot(true, 'Second Wheel Assembly', '9secondWheelAnnotation', 'Second element of the wheel train, driven by the intermediate wheel. Holds seconds hand.', '9', undefined);
handleAnnot(true, 'Intermediate Wheel Assembly', '10intWheelAnnotation', 'First element of the wheel train, driven by the rotor.', '10', undefined);
handleAnnot(true, 'TWB Assembly', '11twbAnnotation', 'Train Wheel Bridge Assembly. Holds the wheel train together and houses the jewels.', '11', undefined);
handleAnnot(true, 'TWB Banking', '12twbBankingAnnotation', 'Props up the train wheel bridge.', '12', undefined);
handleAnnot(true, 'Bridle Screw', '13bridleScrewAnnotation', 'Joins the battery bridle and ECB to the main plate.', '13', undefined);
handleAnnot(true, 'Bridle Screw', '13bridleScrewAnnotation.001', 'Joins the coil guard, coil assembly, and stator to the main plate.', '13.1', undefined);
handleAnnot(true, 'Bridle Screw', '13bridleScrewAnnotation.002', 'Joins the TWB to the main plate, separated by the TWB banking.', '13.2', undefined);
handleAnnot(true, 'Bridle Screw', '13bridleScrewAnnotation.003', 'Joins the TWB to clutch and the main assembly.', '13.3', undefined);
handleAnnot(true, 'Clutch Screw', '14clutchScrew', 'Joins the clutch to the main assembly.', '14', undefined);
handleAnnot(true, 'Coil Assembly', '15coilAnnotation', 'An electric signal is supplied here in one-second bursts from the ECB, producing a magnetic field which turns the rotor.', '15', undefined);
handleAnnot(true, 'CSSL', '16csslAnnotation', 'Center Second Stop Level. Stops the wheel train in setting mode.', '16', undefined);
handleAnnot(true, 'CSSL Screw', '17csslScrewAnnotation', 'Holds the CSSL in place.', '17', undefined);
handleAnnot(true, 'ECB Assembly', '18ecbAnnotation', 'Electronic Circuit Board assembly. Electricity from the battery passes through a small quartz crystal, causing it to oscillate at 32,768 Hz. The signal generated then passes through a series of switches, which reduce it to 1 Hz (once per second), before powering the coil.', '18', undefined);
handleAnnot(true, 'EM Screw', '19emScrewAnnotation', 'Electric Module screw. Joins the coil guard, ECB, coil assembly, and stator to the main plate.', '19', undefined);
handleAnnot(true, 'Coil Guard', '20coilGuardAnnotation', 'Protects the coil assembly.', '20', undefined);
handleAnnot(true, 'Battery', '21batteryAnnotation', 'Supplies electrical power to the movement.', '21', undefined);
handleAnnot(true, 'Battery Bridle', '22batteryBridleAnnotation', 'Holds the battery in place.', '22', undefined);
handleAnnot(true, 'Battery Holder', '23batteryHolderAnnotation', 'Prevents the battery from slipping off the side of the movement.', '23', undefined);
handleAnnot(true, 'Stem', 'stemAnnotation', 'An extension that moves the sliding pinion. When pulled, a mechanism pushes the pinion to link with the minute wheel.', 'stem', undefined);
handleAnnot(true, 'Sliding Pinion', 'slidingPinionAnnotation', 'In setting mode, it links with the minute wheel and drives it when the stem is rotated.', 'sp', undefined);
handleAnnot(true, 'Crown', 'crownAnnotation', 'Attaches to the stem to allow users to pull the stem and twist to set the movement.', 'crn', undefined);
handleAnnot(true, 'Hour Wheel', 'hourWheelAnnotation', 'Sixth element of the gear train, detached from the movement, but driven by the minute wheel and holding the hour hand.', 'hw', undefined);
setHTMLElemStyle('display', 'none', ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '13.1', '13.2', '13.3', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', 'hw', 'sp', 'crn', 'stem'], false);
registerOnClick('Metal block assy.', false, false, [0,1,2], function() {
  setHTMLElemStyle('display', 'block', '1', false);
}, function() {
  setHTMLElemStyle('display', 'none', '1', false);
});
registerOnClick('Minute wheel assembly', false, false, [0,1,2], function() {
  setHTMLElemStyle('display', 'block', '2', false);
}, function() {
  setHTMLElemStyle('display', 'none', '2', false);
});
registerOnClick('Cannon pinion assembly', false, false, [0,1,2], function() {
  setHTMLElemStyle('display', 'block', '3', false);
}, function() {
  setHTMLElemStyle('display', 'none', '3', false);
});
registerOnClick('Center bridge assembly', false, false, [0,1,2], function() {
  setHTMLElemStyle('display', 'block', '4', false);
}, function() {
  setHTMLElemStyle('display', 'none', '4', false);
});
registerOnClick('Stator', false, false, [0,1,2], function() {
  setHTMLElemStyle('display', 'block', '5', false);
}, function() {
  setHTMLElemStyle('display', 'none', '5', false);
});
registerOnClick('Clutch assembly', false, false, [0,1,2], function() {
  setHTMLElemStyle('display', 'block', '6', false);
}, function() {
  setHTMLElemStyle('display', 'none', '6', false);
});
registerOnClick('Rotor assembly', false, false, [0,1,2], function() {
  setHTMLElemStyle('display', 'block', '7', false);
}, function() {
  setHTMLElemStyle('display', 'none', '7', false);
});
registerOnClick('Third wheel assembly', false, false, [0,1,2], function() {
  setHTMLElemStyle('display', 'block', '8', false);
}, function() {
  setHTMLElemStyle('display', 'none', '8', false);
});
registerOnClick('Second wheel assembly', false, false, [0,1,2], function() {
  setHTMLElemStyle('display', 'block', '9', false);
}, function() {
  setHTMLElemStyle('display', 'none', '9', false);
});
registerOnClick('Int. wheel assembly', false, false, [0,1,2], function() {
  setHTMLElemStyle('display', 'block', '10', false);
}, function() {
  setHTMLElemStyle('display', 'none', '10', false);
});
registerOnClick('Train Wheel Bridge Assembly', false, false, [0,1,2], function() {
  setHTMLElemStyle('display', 'block', '11', false);
}, function() {
  setHTMLElemStyle('display', 'none', '11', false);
});
registerOnClick('TWB banking', false, false, [0,1,2], function() {
  setHTMLElemStyle('display', 'block', '12', false);
}, function() {
  setHTMLElemStyle('display', 'none', '12', false);
});
registerOnClick('Bridle screw', false, false, [0,1,2], function() {
  setHTMLElemStyle('display', 'block', '13', false);
}, function() {
  setHTMLElemStyle('display', 'none', '13', false);
});
registerOnClick('Bridle screw.001', false, false, [0,1,2], function() {
  setHTMLElemStyle('display', 'block', '13.1', false);
}, function() {
  setHTMLElemStyle('display', 'none', '13.1', false);
});
registerOnClick('Bridle screw.002', false, false, [0,1,2], function() {
  setHTMLElemStyle('display', 'block', '13.2', false);
}, function() {
  setHTMLElemStyle('display', 'none', '13.2', false);
});
registerOnClick('Bridle screw.003', false, false, [0,1,2], function() {
  setHTMLElemStyle('display', 'block', '13.3', false);
}, function() {
  setHTMLElemStyle('display', 'none', '13.3', false);
});
registerOnClick('Clutch screw', false, false, [0,1,2], function() {
  setHTMLElemStyle('display', 'block', '14', false);
}, function() {
  setHTMLElemStyle('display', 'none', '14', false);
});
registerOnClick('Coil assembly', false, false, [0,1,2], function() {
  setHTMLElemStyle('display', 'block', '15', false);
}, function() {
  setHTMLElemStyle('display', 'none', '15', false);
});
registerOnClick('Center second stop lever', false, false, [0,1,2], function() {
  setHTMLElemStyle('display', 'block', '16', false);
}, function() {
  setHTMLElemStyle('display', 'none', '16', false);
});
registerOnClick('CSSL screw', false, false, [0,1,2], function() {
  setHTMLElemStyle('display', 'block', '17', false);
}, function() {
  setHTMLElemStyle('display', 'none', '17', false);
});
registerOnClick('ECB assembly', false, false, [0,1,2], function() {
  setHTMLElemStyle('display', 'block', '18', false);
}, function() {
  setHTMLElemStyle('display', 'none', '18', false);
});
registerOnClick('EM screw', false, false, [0,1,2], function() {
  setHTMLElemStyle('display', 'block', '19', false);
}, function() {
  setHTMLElemStyle('display', 'none', '19', false);
});
registerOnClick('Coil guard', false, false, [0,1,2], function() {
  setHTMLElemStyle('display', 'block', '20', false);
}, function() {
  setHTMLElemStyle('display', 'none', '20', false);
});
registerOnClick('Battery', false, false, [0,1,2], function() {
  setHTMLElemStyle('display', 'block', '21', false);
}, function() {
  setHTMLElemStyle('display', 'none', '21', false);
});
registerOnClick('Battery bridle', false, false, [0,1,2], function() {
  setHTMLElemStyle('display', 'block', '22', false);
}, function() {
  setHTMLElemStyle('display', 'none', '22', false);
});
registerOnClick('Battery holder', false, false, [0,1,2], function() {
  setHTMLElemStyle('display', 'block', '23', false);
}, function() {
  setHTMLElemStyle('display', 'none', '23', false);
});
registerOnClick('Hour wheel', false, false, [0,1,2], function() {
  setHTMLElemStyle('display', 'block', 'hw', false);
}, function() {
  setHTMLElemStyle('display', 'none', 'hw', false);
});
registerOnClick('Stem', false, false, [0,1,2], function() {
  setHTMLElemStyle('display', 'block', 'stem', false);
  setHTMLElemStyle('display', 'block', 'crn', false);
}, function() {
  setHTMLElemStyle('display', 'none', 'stem', false);
  setHTMLElemStyle('display', 'none', 'crn', false);
});
registerOnClick('Sliding pinion', false, false, [0,1,2], function() {
  setHTMLElemStyle('display', 'block', 'sp', false);
}, function() {
  setHTMLElemStyle('display', 'none', 'sp', false);
});



} // end of PL.init function

PL.disposeListeners = function() {
    if (_pGlob) {
        _pGlob.eventListeners.forEach(({ target, type, listener, optionsOrUseCapture }) => {
            target.removeEventListener(type, listener, optionsOrUseCapture);
        });
        _pGlob.eventListeners.length = 0;
    }
}

PL.dispose = function() {
    PL.disposeListeners();
    _pGlob = null;
    // backward compatibility
    if (v3d[Symbol.toStringTag] !== 'Module') {
        delete v3d.PL;
        delete v3d.puzzles;
    }
}



return PL;

}

export { createPL };
